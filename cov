import numpy as np

def sliding_window_cov(data, w):
    """
    Computes the covariance matrix for each sliding window of width w from the data.
    
    Parameters:
      data : numpy.ndarray
          Data array of shape (n, p) where n is the number of observations and p is the number of variables.
      w : int
          The window size (number of consecutive rows) over which the covariance is computed.
    
    Returns:
      cov : numpy.ndarray
          Array of covariance matrices of shape (n - w + 1, p, p). Each cov[i] is the covariance matrix computed from
          data[i:i+w].
    """
    n, p = data.shape
    
    # Prepend a row/array of zeros to allow easy difference computation.
    cumsum = np.vstack([np.zeros((1, p)), np.cumsum(data, axis=0)])
    
    # Compute cumulative sum of outer products.
    # Compute outer product for each row, then cumulative sum along axis 0.
    outer_products = np.einsum('ij,ik->ijk', data, data)
    cumsum_outer = np.concatenate([np.zeros((1, p, p)), np.cumsum(outer_products, axis=0)], axis=0)
    
    # Compute sums over each sliding window using differences of cumulative sums.
    s = cumsum[w:] - cumsum[:-w]        # shape: (n - w + 1, p)
    Q = cumsum_outer[w:] - cumsum_outer[:-w]  # shape: (n - w + 1, p, p)
    
    # Compute the covariance matrices for each window.
    # Cov = (Q - outer(s, s)/w) / (w - 1)
    # np.einsum computes the outer product for each window in a vectorized fashion.
    cov = (Q - np.einsum('ij,ik->ijk', s, s) / w) / (w - 1)
    
    return cov

# Example usage:
if __name__ == "__main__":
    # Create some random data: 100 observations and 5 variables.
    np.random.seed(42)
    data = np.random.randn(100, 5)
    
