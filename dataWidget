//added search
import ipysheet
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML
from ipykernel.comm import Comm

selected_row = None
selected_col = None
search_results = []
search_index = -1
sheet = None

def load_csv(b):
    file_name = load_file_name.value
    if file_name:
        try:
            df = pd.read_csv(file_name, dtype=str)  # Load all data as strings
            load_dataframe(df)
        except Exception as e:
            print(f"Error loading CSV file: {e}")

def load_dataframe(df):
    global sheet, df_backup
    df_backup = df.copy()
    sheet = ipysheet.sheet(rows=df.shape[0], columns=df.shape[1])
    for col in range(df.shape[1]):
        for row in range(df.shape[0]):
            ipysheet.cell(row, col, value=df.iat[row, col], sheet=sheet, type='text')
    clear_output(wait=True)
    display(ui)
    display(sheet)
    display(HTML(js_code))

def save_csv(b):
    file_name = save_file_name.value
    if file_name:
        try:
            df = ipysheet.to_dataframe(sheet).fillna('')
            df.to_csv(file_name, index=False)
            print(f"Sheet saved to {file_name}")
        except Exception as e:
            print(f"Error saving CSV file: {e}")

def load_from_memory(b):
    df_name = dataframe_name.value
    if df_name:
        try:
            df = globals()[df_name]
            load_dataframe(df)
        except KeyError:
            print(f"DataFrame '{df_name}' not found in memory.")
        except Exception as e:
            print(f"Error loading DataFrame from memory: {e}")

def add_row(b):
    global selected_row
    df = ipysheet.to_dataframe(sheet).fillna('')
    new_row = pd.Series(["" for _ in range(df.shape[1])], index=df.columns)
    if selected_row is None or selected_row < 0:
        selected_row = 0
    df = pd.concat([df.iloc[:selected_row + 1], new_row.to_frame().T, df.iloc[selected_row + 1:]]).reset_index(drop=True)
    load_dataframe(df)
    selected_row += 1

def delete_row(b):
    global selected_row
    df = ipysheet.to_dataframe(sheet).fillna('')
    if not df.empty and selected_row is not None and 0 <= selected_row < df.shape[0]:
        df = df.drop(selected_row).reset_index(drop=True)
        load_dataframe(df)
        if selected_row >= df.shape[0]:
            selected_row = max(0, df.shape[0] - 1)

def add_column(b):
    global selected_col
    df = ipysheet.to_dataframe(sheet).fillna('')
    new_col_name = f"Column {len(df.columns)}"
    if selected_col is None or selected_col < 0:
        selected_col = 0
    df.insert(selected_col + 1, new_col_name, [""] * len(df))
    load_dataframe(df)
    selected_col += 1

def delete_column(b):
    global selected_col
    df = ipysheet.to_dataframe(sheet).fillna('')
    if not df.empty and selected_col is not None and 0 <= selected_col < df.shape[1]:
        df = df.drop(df.columns[selected_col], axis=1)
        load_dataframe(df)
        if selected_col >= df.shape[1]:
            selected_col = max(0, df.shape[1] - 1)

def highlight_search_result(row, col):
    display(HTML(f"""
    <script>
    function highlightCell(row, col) {{
        setTimeout(function() {{
            var cells = document.querySelectorAll('.ipysheet-cell');
            cells.forEach(cell => {{
                cell.style.backgroundColor = '';
            }});
            var cell = document.querySelector(`.ipysheet-cell[data-row="${{row}}"][data-col="${{col}}"]`);
            if (cell) {{
                cell.style.backgroundColor = 'yellow';
                cell.scrollIntoView({{behavior: 'smooth', block: 'center', inline: 'center'}});
            }}
        }}, 100);  // Short delay to ensure the sheet has rendered
    }}
    highlightCell({row}, {col});
    </script>
    """))

def search_cell(b):
    global search_results, search_index
    search_str = search_text.value.lower()
    df = ipysheet.to_dataframe(sheet).fillna('')
    search_results = [(row, col) for row in range(df.shape[0]) for col in range(df.shape[1]) 
                      if search_str in str(df.iat[row, col]).lower()]
    search_index = 0
    if search_results:
        row, col = search_results[search_index]
        highlight_search_result(row, col)
        print(f"Found '{search_str}' at row {row + 1}, column {col + 1}")
    else:
        print(f"No cells contain the string '{search_str}'")

def next_search_result(b):
    global search_index
    if search_results:
        search_index = (search_index + 1) % len(search_results)
        row, col = search_results[search_index]
        highlight_search_result(row, col)
        print(f"Result {search_index + 1} of {len(search_results)}: row {row + 1}, column {col + 1}")
    else:
        print("No search results available. Perform a search first.")

def handle_cell_click(event):
    global selected_row, selected_col
    selected_row = event['row']
    selected_col = event['column']
    print(f"Selected cell: Row {selected_row + 1}, Column {selected_col + 1}")

load_file_name = widgets.Text(placeholder='Enter file name to load')
save_file_name = widgets.Text(placeholder='Enter file name to save')
dataframe_name = widgets.Text(placeholder='Enter DataFrame name')
search_text = widgets.Text(placeholder='Enter search string')

load_button = widgets.Button(description="Load CSV")
load_button.on_click(load_csv)
save_button = widgets.Button(description="Save to CSV")
save_button.on_click(save_csv)
load_mem_button = widgets.Button(description="Load DataFrame from Memory")
load_mem_button.on_click(load_from_memory)

add_row_button = widgets.Button(description="Add Row")
add_row_button.on_click(add_row)
delete_row_button = widgets.Button(description="Delete Row")
delete_row_button.on_click(delete_row)
add_column_button = widgets.Button(description="Add Column")
add_column_button.on_click(add_column)
delete_column_button = widgets.Button(description="Delete Column")
delete_column_button.on_click(delete_column)

search_button = widgets.Button(description="Search")
search_button.on_click(search_cell)
next_button = widgets.Button(description="Next")
next_button.on_click(next_search_result)

ui = widgets.VBox([
    widgets.HBox([widgets.Label("Load CSV:"), load_file_name, load_button]),
    widgets.HBox([widgets.Label("Save CSV:"), save_file_name, save_button]),
    widgets.HBox([widgets.Label("Load DataFrame from Memory:"), dataframe_name, load_mem_button]),
    widgets.HBox([add_row_button, delete_row_button, add_column_button, delete_column_button]),
    widgets.HBox([widgets.Label("Search:"), search_text, search_button, next_button])
])

js_code = """
<script>
document.addEventListener('click', function(event) {
    if (event.target.classList.contains('ipysheet-cell')) {
        var row = parseInt(event.target.getAttribute('data-row'));
        var col = parseInt(event.target.getAttribute('data-col'));
        IPython.notebook.kernel.execute(`handle_cell_click({'row': ${row}, 'column': ${col}})`);
    }
});
</script>
"""

comm = Comm(target_name='context_menu')
comm.on_msg(lambda comm, msg: handle_cell_click(msg['content']['data']))

display(ui)
sheet = ipysheet.sheet(rows=0, columns=0)
display(sheet)
display(HTML(js_code))


////
!pip install ipysheet
import ipysheet
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, clear_output
import io


# from google.colab import output
# output.enable_custom_widget_manager()

def load_csv(b):
    file_name = load_file_name.value
    if file_name:
        df = pd.read_csv(file_name, dtype=str)  # Load all data as strings
        load_dataframe(df)

def load_dataframe(df):
    global sheet
    sheet = ipysheet.sheet(rows=df.shape[0], columns=df.shape[1])
    for col in range(df.shape[1]):
        for row in range(df.shape[0]):
            ipysheet.cell(row, col, value=df.iat[row, col], sheet=sheet, type='text')
    clear_output(wait=True)
    display(ui)
    display(sheet)

def save_csv(b):
    file_name = save_file_name.value
    if file_name:
        df = ipysheet.to_dataframe(sheet)
        df.to_csv(file_name, index=False)
        print(f"Sheet saved to {file_name}")

def load_from_memory(b):
    df_name = dataframe_name.value
    if df_name:
        try:
            df = globals()[df_name]
            load_dataframe(df)
        except KeyError:
            print(f"DataFrame '{df_name}' not found in memory.")

load_file_name = widgets.Text(placeholder='Enter file name to load')
save_file_name = widgets.Text(placeholder='Enter file name to save')
dataframe_name = widgets.Text(placeholder='Enter DataFrame name')

load_button = widgets.Button(description="Load CSV")
load_button.on_click(load_csv)
save_button = widgets.Button(description="Save to CSV")
save_button.on_click(save_csv)
load_mem_button = widgets.Button(description="Load DataFrame from Memory")
load_mem_button.on_click(load_from_memory)

ui = widgets.VBox([
    widgets.HBox([widgets.Label("Load CSV:"), load_file_name, load_button]),
    widgets.HBox([widgets.Label("Save CSV:"), save_file_name, save_button]),
    widgets.HBox([widgets.Label("Load DataFrame from Memory:"), dataframe_name, load_mem_button])
])

display(ui)
